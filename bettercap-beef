beef


Comun Errors:

Dns Problem: ------>>>>> Modificar el Archivo config.yaml   DNS: enable:True to enable:False


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


Usage: bettercap [options]

MAIN:

    -I, --interface IFACE            Network interface name - default: eth0
    -G, --gateway ADDRESS            Manually specify the gateway address, if not specified the current gateway will be retrieved and used.
    -T, --target ADDRESS1,ADDRESS2   Target IP addresses, if not specified the whole subnet will be targeted.
    // -T 192.168.1.1,192.168.1.2
    // -T 00:11:22:33:44:55:66:77 (MAC ADDRESS TARGET)
    // --random-mac Randomiza entre direcciones MAC durante el ataque
        --ignore ADDRESS1,ADDRESS2   Ignore these addresses if found while searching for targets.
    // --ignore 192.168.1.1,192.168.1.2
        --no-discovery               Do not actively search for hosts, just use the current ARP cache, default to false.
        --no-target-nbns             Disable target NBNS hostname resolution.
        --packet-throttle NUMBER     Number of seconds ( can be a decimal number ) to wait between each packet to be sent.
        --check-updates              Will check if any update is available and then exit.
    -h, --help                       Display the available options.

LOGGING:

    -O, --log LOG_FILE               Log all messages into a file, if not specified the log messages will be only print into the shell.
        --log-timestamp              Enable logging with timestamps for each line, disabled by default.
    -D, --debug                      Enable debug logging.
        --silent                     Suppress every message which is not an error or a warning, default to false.

SPOOFING:

    -S, --spoofer NAME               Spoofer module to use, available: NONE, ICMP, ARP - default: ARP.
        // sudo bettercap or sudo bettercap -S ARP or sudo bettercap --spoofer ARP
        // sudo bettercap -S ICMP or sudo bettercap --spoofer ICMP
        // Si queremos realizar una arpspoof contra 2 maquinas: bettercap -T 192.168.1.Victima -G 192.168.1.Gateway 
        //--spoofer ICMP/ARP/NONE. Si no indicamos Target Spoofearemos toda la red Local
        --no-spoofing                Disable spoofing, alias for --spoofer NONE.
        // sudo bettercap -S NONE or sudo bettercap --spoofer NONE or sudo bettercap --no-spoofing
        // Si por ejemplo configuramos a bettercap como sniffer debemos indicar que no queremos Spoofear (--no-spoofing)
        --half-duplex                Enable half-duplex MITM, this will make bettercap work in those cases when the router is not vulnerable.
        --kill                       Instead of forwarding packets, this switch will make targets connections to be killed.
        // sudo bettercap -T 192.168.1.2 --kill (No dear 192.168.1.2, you won’t connect to anything anymore :D)

SNIFFING:

    -X, --sniffer                    Enable sniffer.
    -L, --local                      Parse packets coming from/to the address of this computer ( NOTE: Will set -X to true ), default to false.
        --sniffer-source FILE        Load packets from the specified PCAP file instead of the interface ( will enable sniffer ).
        --sniffer-output FILE        Save all packets to the specified PCAP file ( will enable sniffer ).
        //Guardar los paquetes en el archivo FILE que especifiquemos
        --sniffer-filter EXPRESSION  Configure the sniffer to use this BPF filter ( will enable sniffer ).
        //El modo Sniffer activa por defecto los modulos  Spoofing-Discovery-Sniffer. EXPRESSION nos permite filtrar la informacion
        //deseada y centrarnos en esta. ejemplo: --sniffer-filter "tcp port 80"
    -P, --parsers PARSERS            Comma separated list of packet parsers to enable, '*' for all ( NOTE: Will set -X to true ), available: WHATSAPP, NTLMSS, REDIS, PGSQL, FTP, SNPP, SNMP, COOKIE, HTTPAUTH, HTTPS, MYSQL, IRC, DICT, POST, MAIL, CREDITCARD, MPD, RLOGIN, URL, NNTP, DHCP - default: *
        --custom-parser EXPRESSION   Use a custom regular expression in order to capture and show sniffed data ( NOTE: Will set -X to true ).

PROXYING:


  TCP:

        --tcp-proxy                  Enable TCP proxy ( requires other --tcp-proxy-* options to be specified ).
        --tcp-proxy-module MODULE    Ruby TCP proxy module to load.
        --tcp-proxy-port PORT        Set local TCP proxy port, default to 2222 .
        --tcp-proxy-upstream ADDRESS:PORT
                                     Set TCP proxy upstream server address and port.
        --tcp-proxy-upstream-address ADDRESS
                                     Set TCP proxy upstream server address.
        --tcp-proxy-upstream-port PORT
                                     Set TCP proxy upstream server port.
  HTTP:

        --proxy                      Enable HTTP proxy and redirects all HTTP requests to it, default to false.
        //solo registra solicitudes HTTP
        --proxy-port PORT            Set HTTP proxy port, default to 8080.
        --no-sslstrip                Disable SSLStrip.
        --proxy-module MODULE        Ruby proxy module to load, either a custom file or one of the following: injecthtml, injectjs, injectcss.
        --http-ports PORT1,PORT2     Comma separated list of HTTP ports to redirect to the proxy, default to 80.

  HTTPS:

        --proxy-https                Enable HTTPS proxy and redirects all HTTPS requests to it, default to false.
        --proxy-https-port PORT      Set HTTPS proxy port, default to 8083.
        --proxy-pem FILE             Use a custom PEM CA certificate file for the HTTPS proxy, default to /root/.bettercap/bettercap-ca.pem .
        --https-ports PORT1,PORT2    Comma separated list of HTTPS ports to redirect to the proxy, default to 443.

  CUSTOM:

        --custom-proxy ADDRESS       Use a custom HTTP upstream proxy instead of the builtin one.
        --custom-proxy-port PORT     Specify a port for the custom HTTP upstream proxy, default to 8080.
        --custom-https-proxy ADDRESS Use a custom HTTPS upstream proxy instead of the builtin one.
        --custom-https-proxy-port PORT
                                     Specify a port for the custom HTTPS upstream proxy, default to 8083.
        --custom-redirection RULE    Apply a custom port redirection, the format of the rule is PROTOCOL ORIGINAL_PORT NEW_PORT. For instance TCP 21 2100 will redirect all TCP traffic going to port 21, to port 2100.

SERVERS:

        --httpd                      Enable HTTP server, default to false.
        --httpd-port PORT            Set HTTP server port, default to 8081.
        --httpd-path PATH            Set HTTP server path, default to ./ .
        --dns FILE                   Enable DNS server and use this file as a hosts resolution table.
        --dns-port PORT              Set DNS server port, default to 5300.

For examples & docs please visit http://bettercap.org/docs/
